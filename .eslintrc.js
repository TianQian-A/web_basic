module.exports = {
	root: true,
	env: {
		node: true,
	},
	extends: ['plugin:vue/vue3-essential', 'eslint:recommended', 'prettier', '@vue/prettier'],
	plugins: ['prettier'],

	parserOptions: {
		parser: '@babel/eslint-parser',
		requireConfigFile: false,
		ecmaVersion: 2020,
	},
	rules: {
		'prettier/prettier': [
			'error',
			{
				useTabs: true,
				indent: 'tab',
				tabWidth: 2,
				printWidth: 100,
				htmlWhitespaceSensitivity: 'ignore',
			},
		],
		'arrow-body-style': 'off',
		'block-scoped-var': ['error'],
		'callback-return': ['error', ['done', 'proceed', 'next', 'onwards', 'callback', 'cb']],
		'camelcase': ['off', { 'properties': 'always' }],
		'comma-style': ['warn', 'last'],
		'comma-dangle': ['error', 'always-multiline'],
		'curly': ['error', 'multi-line'],
		'eqeqeq': ['error', 'always'],
		'eol-last': ['warn'],
		'handle-callback-err': ['off'],
		'indent': ['warn', 'tab', {
			'SwitchCase': 1,
			'MemberExpression': 'off',
			'FunctionDeclaration': { 'body': 1, 'parameters': 'off' },
			'FunctionExpression': { 'body': 1, 'parameters': 'off' },
			'CallExpression': { 'arguments': 'off' },
			'ArrayExpression': 1,
			'ObjectExpression': 1,
			'ignoredNodes': ['ConditionalExpression'],
		}],
		'linebreak-style': ['error', 'unix'],
		'no-dupe-keys': ['error'],
		'no-duplicate-case': ['error'],
		'no-extra-semi': ['warn'],
		'no-labels': ['error'],
		'no-mixed-spaces-and-tabs': [2, 'smart-tabs'],
		'no-redeclare': ['warn'],
		'no-return-assign': ['error', 'always'],
		'no-sequences': ['error'],
		'no-trailing-spaces': ['off'],
		'no-undef': ['off'],
		'no-unexpected-multiline': ['warn'],
		'no-unreachable': ['warn'],
		'no-unused-vars': ['warn', {
			'caughtErrors': 'all',
			'caughtErrorsIgnorePattern': '^unused($|[A-Z].*$)',
			'argsIgnorePattern': '^unused($|[A-Z].*$)',
			'varsIgnorePattern': '^unused($|[A-Z].*$)',
		}],
		'no-use-before-define': ['error', { 'functions': false }],
		'one-var': ['warn', 'never'],
		'prefer-arrow-callback': ['warn', { 'allowNamedFunctions': true }],
		'quotes': ['warn', 'single', { 'avoidEscape': false, 'allowTemplateLiterals': true }],
		'semi': ['error', 'always'],
		'semi-spacing': ['warn', { 'before': false, 'after': true }],
		'semi-style': ['warn', 'last'],
	},
	globals: {
		defineProps: 'readonly',
	},
};
